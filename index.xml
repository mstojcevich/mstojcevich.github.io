<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcus&#39;s Blog</title>
    <link>https://mstojcevich.github.io/</link>
    <description>Recent content on Marcus&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Nov 2018 22:58:41 -0500</lastBuildDate>
    
	<atom:link href="https://mstojcevich.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using D fibers to implement the Gameboy&#39;s timing</title>
      <link>https://mstojcevich.github.io/post/d-gb-emu-fibers/</link>
      <pubDate>Mon, 05 Nov 2018 22:58:41 -0500</pubDate>
      
      <guid>https://mstojcevich.github.io/post/d-gb-emu-fibers/</guid>
      <description>Hi there! It&amp;rsquo;s been over a year and a half since I last wrote a post about my Gameboy emulator. This time I want to go over an idea I had for a unique-ish strategy of dealing with timing in video game emulators. This is applying the concept of coroutines (1958) to a Gameboy emulator.
An overview of emulation timing In the hardware of game systems such as the Gameboy and Nintendo Entertainment System, there are many different components operating at the same time.</description>
    </item>
    
    <item>
      <title>Writing a Gameboy emulator in D: Part 1 - Registers</title>
      <link>https://mstojcevich.github.io/post/d-gb-emu-registers/</link>
      <pubDate>Sat, 18 Feb 2017 15:39:51 -0500</pubDate>
      
      <guid>https://mstojcevich.github.io/post/d-gb-emu-registers/</guid>
      <description>About the Gameboy CPU The Gameboy uses a custom 8-bit Sharp LR35902 CPU (henceforth referred to as the &amp;ldquo;Gameboy CPU&amp;rdquo;), which uses a modified version of the Zilog Z80 instruction set, which itself is based on the Intel 8080.
The registers of the Gameboy CPU are identical to those of the 8080. Each main register is 8 bits wide, though in many instructions the regsiters can be accessed as groups of two adjacent registers, and are then treated as 16-bit; for example, the register AF is a combination of A and F with the bits of A used as the most significant and F as least significant.</description>
    </item>
    
  </channel>
</rss>